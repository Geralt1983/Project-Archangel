diff --git a/.snapshot_out/files/app/db_pg.py b/.snapshot_out/files/app/db_pg.py
index a0f1dcb..517a7db 100644
--- a/.snapshot_out/files/app/db_pg.py
+++ b/.snapshot_out/files/app/db_pg.py
@@ -1,7 +1,6 @@
 import os
 import json
 import threading
-from contextlib import contextmanager
 
 try:
     import psycopg2
diff --git a/.snapshot_out/files/outbox_worker.py b/.snapshot_out/files/outbox_worker.py
index 671a6cb..58ea4de 100644
--- a/.snapshot_out/files/outbox_worker.py
+++ b/.snapshot_out/files/outbox_worker.py
@@ -1,6 +1,5 @@
 #!/usr/bin/env python3
 import argparse
-import json
 from typing import Dict, Any
 from app.db_pg import init, get_conn
 from app.utils.outbox import OutboxManager
diff --git a/.snapshot_out/files/scripts/review_bundle.py b/.snapshot_out/files/scripts/review_bundle.py
index 396a937..dc5d95e 100644
--- a/.snapshot_out/files/scripts/review_bundle.py
+++ b/.snapshot_out/files/scripts/review_bundle.py
@@ -1,5 +1,9 @@
 #!/usr/bin/env python3
-import argparse, json, os, subprocess, time, hashlib, shutil
+import argparse
+import json
+import subprocess
+import time
+import hashlib
 from pathlib import Path
 
 def run(cmd, cwd=None, check=True):
diff --git a/.snapshot_out/files/tests/test_basic.py b/.snapshot_out/files/tests/test_basic.py
index 5ec34f1..290a094 100644
--- a/.snapshot_out/files/tests/test_basic.py
+++ b/.snapshot_out/files/tests/test_basic.py
@@ -2,9 +2,8 @@
 Basic tests to ensure CI pipeline works
 """
 
-import pytest
 from app.utils.retry import next_backoff, retry
-from app.utils.outbox import OutboxOperation, OutboxManager, make_idempotency_key
+from app.utils.outbox import OutboxOperation, make_idempotency_key
 
 
 def test_next_backoff():
diff --git a/.snapshot_out/files/tests/test_outbox_integration.py b/.snapshot_out/files/tests/test_outbox_integration.py
index 8fdf264..f19e756 100644
--- a/.snapshot_out/files/tests/test_outbox_integration.py
+++ b/.snapshot_out/files/tests/test_outbox_integration.py
@@ -1,6 +1,4 @@
 import os
-import time
-from datetime import datetime, timezone
 from app.db_pg import init, get_conn
 from app.utils.outbox import OutboxManager, make_idempotency_key
 
diff --git a/app/api_memory.py b/app/api_memory.py
index cf2f1e2..28f84e4 100644
--- a/app/api_memory.py
+++ b/app/api_memory.py
@@ -1,5 +1,4 @@
 from fastapi import APIRouter, Query, HTTPException
-from typing import Optional
 from app.db_pg import get_conn
 
 router = APIRouter(prefix="/memory", tags=["memory"])
diff --git a/app/api_usage.py b/app/api_usage.py
index e6eb547..d7ddffe 100644
--- a/app/api_usage.py
+++ b/app/api_usage.py
@@ -3,7 +3,6 @@ from pathlib import Path
 import json
 import time
 import os
-from typing import Dict, Any, Optional
 
 router = APIRouter(prefix="/usage", tags=["usage"])
 
@@ -154,9 +153,9 @@ def configure_monitor(log_file: str = ".local/usage/latest.json"):
             "log_file": str(log_path),
             "config": config,
             "next_steps": [
-                f"Start monitor with: make usage",
+                "Start monitor with: make usage",
                 f"Configure monitor to write to {log_path}",
-                f"Check status with: curl localhost:8000/usage/status"
+                "Check status with: curl localhost:8000/usage/status"
             ]
         }
         
diff --git a/app/audit.py b/app/audit.py
index ed99402..7cf1325 100644
--- a/app/audit.py
+++ b/app/audit.py
@@ -1,4 +1,6 @@
-import json, time, sys
+import json
+import time
+import sys
 
 def log_event(event_type: str, data: dict):
     rec = {"ts": int(time.time()), "event": event_type, **data}
diff --git a/app/balancer.py b/app/balancer.py
index 2ecdcce..10bd667 100644
--- a/app/balancer.py
+++ b/app/balancer.py
@@ -1,4 +1,3 @@
-from datetime import datetime, timezone
 from .config import load_rules
 
 def plan_today(tasks: list[dict], available_hours_today: float, fairness_deficits: dict[str, float] = None) -> dict[str, list[str]]:
diff --git a/app/config.py b/app/config.py
index 620a700..3b19bce 100644
--- a/app/config.py
+++ b/app/config.py
@@ -1,4 +1,5 @@
-import yaml, os
+import yaml
+import os
 from functools import lru_cache
 
 @lru_cache
diff --git a/app/coord/hooks.py b/app/coord/hooks.py
index 6d5d0a9..49b4a4f 100644
--- a/app/coord/hooks.py
+++ b/app/coord/hooks.py
@@ -1,6 +1,5 @@
 from __future__ import annotations
 import json
-import os
 from datetime import datetime, timezone
 from typing import Any, Mapping
 from app.db_pg import get_conn
diff --git a/app/db_pg.py b/app/db_pg.py
index b60f564..a8b8df1 100644
--- a/app/db_pg.py
+++ b/app/db_pg.py
@@ -1,7 +1,6 @@
 import os
 import json
 import threading
-from contextlib import contextmanager
 
 def get_db_config():
     database_url = os.getenv("DATABASE_URL")
diff --git a/app/mcp_client.py b/app/mcp_client.py
index d1e5201..ba70be8 100644
--- a/app/mcp_client.py
+++ b/app/mcp_client.py
@@ -1,4 +1,5 @@
-import os, httpx
+import os
+import httpx
 
 BASE = os.getenv("SERENA_BASE_URL", "")
 KEY = os.getenv("SERENA_API_KEY", "")
diff --git a/app/models.py b/app/models.py
new file mode 100644
index 0000000..98f2926
--- /dev/null
+++ b/app/models.py
@@ -0,0 +1,58 @@
+from __future__ import annotations
+
+from datetime import datetime
+from enum import Enum
+from typing import Any, List, Optional
+
+from pydantic import BaseModel, Field
+
+
+class TaskStatus(str, Enum):
+    """Enumeration of high-level task states."""
+    NEW = "new"
+    IN_PROGRESS = "in_progress"
+    DONE = "done"
+
+class Subtask(BaseModel):
+    """Representation of a simple subtask item."""
+    title: str
+    status: TaskStatus = TaskStatus.NEW
+    effort_hours: Optional[float] = None
+
+
+class TaskIntake(BaseModel):
+    """Incoming task information provided by external sources."""
+    title: str
+    description: Optional[str] = None
+    client: str = "unknown"
+    project: Optional[str] = None
+    deadline: Optional[datetime] = None
+    importance: int = 3
+    effort_hours: Optional[float] = None
+    labels: List[str] = Field(default_factory=list)
+    source: str = "api"
+    meta: dict[str, Any] = Field(default_factory=dict)
+
+class Task(BaseModel):
+    """Normalized task model used internally by the orchestrator."""
+    id: str
+    title: str
+    description: str = ""
+    client: str
+    project: Optional[str] = None
+    task_type: Optional[str] = None
+    deadline: Optional[datetime] = None
+    importance: int = 3
+    effort_hours: Optional[float] = None
+    labels: List[str] = Field(default_factory=list)
+    source: str = "api"
+    meta: dict[str, Any] = Field(default_factory=dict)
+    created_at: datetime
+    updated_at: datetime
+    idempotency_key: str
+    recent_progress: float = 0.0
+    client_sla_hours: Optional[float] = None
+    score: Optional[float] = None
+    checklist: List[str] = Field(default_factory=list)
+    subtasks: List[Subtask] = Field(default_factory=list)
+
diff --git a/app/notify.py b/app/notify.py
index 40cadc3..eb205a6 100644
--- a/app/notify.py
+++ b/app/notify.py
@@ -1,4 +1,5 @@
-import os, httpx
+import os
+import httpx
 
 SLACK_WEBHOOK_URL = os.getenv("SLACK_WEBHOOK_URL","")
 
diff --git a/app/orchestrator.py b/app/orchestrator.py
index 01dbcac..05cc9f0 100644
--- a/app/orchestrator.py
+++ b/app/orchestrator.py
@@ -365,7 +365,7 @@ class TaskOrchestrator:
         # Persist decision for audit trail (async operation, don't wait)
         try:
             self.state_manager.save_decision(decision)
-        except Exception as e:
+        except Exception:
             # Log but don't fail orchestration
             pass
         
diff --git a/app/providers/adapter_framework.py b/app/providers/adapter_framework.py
index 4231228..93cb640 100644
--- a/app/providers/adapter_framework.py
+++ b/app/providers/adapter_framework.py
@@ -4,7 +4,6 @@ Supports webhook and polling-based providers with standardized orchestration int
 """
 
 import asyncio
-import json
 import logging
 from abc import ABC, abstractmethod
 from datetime import datetime, timezone, timedelta
diff --git a/app/providers/clickup.py b/app/providers/clickup.py
index a140c47..78c7468 100644
--- a/app/providers/clickup.py
+++ b/app/providers/clickup.py
@@ -1,4 +1,6 @@
-import os, hmac, hashlib, httpx
+import hmac
+import hashlib
+import httpx
 from datetime import datetime, timezone
 from .base import ProviderAdapter
 from ..utils.retry import retry_with_backoff, RetryConfig, RateLimitError, ServerError
diff --git a/app/providers/todoist.py b/app/providers/todoist.py
index 27ac9f9..9b5195c 100644
--- a/app/providers/todoist.py
+++ b/app/providers/todoist.py
@@ -1,4 +1,7 @@
-import os, hmac, hashlib, base64, httpx
+import base64
+import hmac
+import hashlib
+import httpx
 from .base import ProviderAdapter
 
 TD_API = "https://api.todoist.com/rest/v2"
diff --git a/app/providers/trello.py b/app/providers/trello.py
index 4c294de..e414f7b 100644
--- a/app/providers/trello.py
+++ b/app/providers/trello.py
@@ -1,4 +1,6 @@
-import os, hmac, hashlib, httpx
+import hmac
+import hashlib
+import httpx
 from .base import ProviderAdapter
 
 TRELLO_API = "https://api.trello.com/1"
diff --git a/app/scheduler.py b/app/scheduler.py
index 1b4b10e..f186be9 100644
--- a/app/scheduler.py
+++ b/app/scheduler.py
@@ -1,4 +1,5 @@
-import os, datetime as dt
+import os
+import datetime as dt
 from .db_pg import fetch_open_tasks, save_task
 from .scoring import compute_score
 from .config import load_rules
diff --git a/app/triage.py b/app/triage.py
index 1eea1d8..94edb5d 100644
--- a/app/triage.py
+++ b/app/triage.py
@@ -1,4 +1,5 @@
-import uuid, datetime as dt
+import uuid
+import datetime as dt
 from .scoring import compute_score
 from .subtasks import build_checklist_and_subtasks
 from .config import load_rules
diff --git a/demo.py b/demo.py
index 8067b03..3bd085f 100644
--- a/demo.py
+++ b/demo.py
@@ -6,7 +6,6 @@ This script demonstrates the core functionality without requiring
 external services like ClickUp.
 """
 
-import json
 from datetime import datetime, timezone, timedelta
 from app.models import TaskIntake, Task
 from app.triage import normalize_task_input, classify_task, fill_task_defaults
@@ -103,7 +102,7 @@ def demo_task_processing():
             print(f"   • {subtask.title}{effort}")
         
         processed_tasks.append(task)
-        print(f"\n✅ Task processed successfully!")
+        print("\n✅ Task processed successfully!")
     
     # Step 7: Show final prioritization
     print(f"\n{'='*60}")
@@ -127,7 +126,7 @@ def demo_task_processing():
     print(f"{'='*60}")
     
     for task in sorted_tasks[:2]:  # Show top 2 tasks
-        print(f"\n📤 Would create in ClickUp:")
+        print("\n📤 Would create in ClickUp:")
         print(f"   Title: {task.title}")
         print(f"   Description: {task.description}")
         print(f"   Tags: {', '.join(task.labels)}")
@@ -210,7 +209,7 @@ def demo_scoring_details():
     
     aging_boost = min(0.5, (hours_since_created / 24) * rules["defaults"]["aging_boost_per_day"] / 100)
     
-    print(f"\n📊 Score Components:")
+    print("\n📊 Score Components:")
     print(f"   Urgency (deadline): {urgency:.3f} (weight: {scoring_config['urgency_weight']:.2f})")
     print(f"   Importance + bias: {importance:.3f} (weight: {scoring_config['importance_weight']:.2f})")
     print(f"   Effort factor: {effort_factor:.3f} (weight: {scoring_config['effort_weight']:.2f})")  
diff --git a/dev/config_optimizer.py b/dev/config_optimizer.py
index 0a14f54..d46d5df 100644
--- a/dev/config_optimizer.py
+++ b/dev/config_optimizer.py
@@ -3,10 +3,8 @@ Smart Configuration Optimizer
 Leverages both Serena MCP (via Claude Code) and HTTP API for intelligent config management
 """
 
-import yaml
-import json
 import httpx
-from typing import Dict, List, Any, Optional
+from typing import Dict, Any
 from datetime import datetime, timedelta
 
 class SmartConfigOptimizer:
@@ -24,7 +22,7 @@ class SmartConfigOptimizer:
         """
         try:
             # Get recent task data
-            response = self.client.get(f"/audit/export?limit=500")
+            response = self.client.get("/audit/export?limit=500")
             tasks = response.json()["tasks"]
             
             # Get weekly summaries
diff --git a/dev/interactive_optimization.py b/dev/interactive_optimization.py
index ab34f62..04c5897 100644
--- a/dev/interactive_optimization.py
+++ b/dev/interactive_optimization.py
@@ -4,7 +4,6 @@ For Claude Code sessions with Serena MCP integration
 """
 
 import yaml
-import json
 from pathlib import Path
 
 class InteractiveOptimizer:
diff --git a/dev/serena_dev_tools.py b/dev/serena_dev_tools.py
index 7ba92b0..6a49337 100644
--- a/dev/serena_dev_tools.py
+++ b/dev/serena_dev_tools.py
@@ -4,7 +4,6 @@ Integration between Claude Code MCP and Project Archangel HTTP API
 """
 
 import httpx
-import json
 from typing import Dict, List, Any
 
 class SerenaDevTools:
diff --git a/outbox_worker.py b/outbox_worker.py
index 671a6cb..58ea4de 100644
--- a/outbox_worker.py
+++ b/outbox_worker.py
@@ -1,6 +1,5 @@
 #!/usr/bin/env python3
 import argparse
-import json
 from typing import Dict, Any
 from app.db_pg import init, get_conn
 from app.utils.outbox import OutboxManager
diff --git a/requirements.txt b/requirements.txt
index 949abce..cb734b7 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,6 +1,7 @@
 # Core dependencies
 psycopg2-binary>=2.9.0
 fastapi>=0.100.0
+pydantic>=2.0.0
 uvicorn[standard]>=0.20.0
 httpx>=0.24.0
 
@@ -8,4 +9,4 @@ httpx>=0.24.0
 pytest>=7.0.0
 
 # Optional development tools
-ruff>=0.1.0
\ No newline at end of file
+ruff>=0.1.0
diff --git a/scripts/bootstrap.sh b/scripts/bootstrap.sh
new file mode 100755
index 0000000..72c19fc
--- /dev/null
+++ b/scripts/bootstrap.sh
@@ -0,0 +1,59 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+echo "🚀 Bootstrapping Project Archangel development environment..."
+
+# Create virtual environment
+if [ ! -d "venv" ]; then
+    echo "📦 Creating virtual environment..."
+    python3 -m venv venv
+else
+    echo "📦 Virtual environment already exists"
+fi
+
+# Activate environment
+echo "🔧 Activating virtual environment..."
+source venv/bin/activate
+
+# Upgrade pip
+echo "⬆️  Upgrading pip..."
+python -m pip install --upgrade pip
+
+# Install requirements
+echo "📋 Installing Python dependencies..."
+pip install -r requirements.txt
+
+# Check for optional dependencies
+echo "🔍 Checking optional dependencies..."
+
+# Check tmux
+if command -v tmux >/dev/null 2>&1; then
+    echo "✅ tmux installed"
+else
+    echo "⚠️  tmux not found - install with: brew install tmux (macOS) or apt install tmux (Linux)"
+fi
+
+# Check Docker
+if command -v docker >/dev/null 2>&1; then
+    echo "✅ docker installed"
+else
+    echo "⚠️  docker not found - install from: https://docs.docker.com/get-docker/"
+fi
+
+# Check PostgreSQL
+if command -v psql >/dev/null 2>&1; then
+    echo "✅ postgresql client installed"
+else
+    echo "⚠️  postgresql client not found - install with: brew install postgresql (macOS)"
+fi
+
+echo ""
+echo "🎉 Bootstrap complete!"
+echo ""
+echo "Next steps:"
+echo "  1. Activate environment: source venv/bin/activate"
+echo "  2. Start services: make up"
+echo "  3. Initialize database: make init"
+echo "  4. Run development environment: make dev"
+echo ""
+echo "Quick start: source venv/bin/activate && make dev"
\ No newline at end of file
diff --git a/scripts/review_bundle.py b/scripts/review_bundle.py
index 396a937..dc5d95e 100644
--- a/scripts/review_bundle.py
+++ b/scripts/review_bundle.py
@@ -1,5 +1,9 @@
 #!/usr/bin/env python3
-import argparse, json, os, subprocess, time, hashlib, shutil
+import argparse
+import json
+import subprocess
+import time
+import hashlib
 from pathlib import Path
 
 def run(cmd, cwd=None, check=True):
diff --git a/simple_demo.py b/simple_demo.py
index 2bf8dc6..bb625b7 100644
--- a/simple_demo.py
+++ b/simple_demo.py
@@ -10,9 +10,8 @@ import sys
 import os
 sys.path.insert(0, os.path.join(os.path.dirname(__file__)))
 
-import json
-from datetime import datetime, timezone, timedelta
-from app.models import TaskIntake, Task, TaskStatus
+from datetime import datetime, timezone
+from app.models import TaskIntake, Task
 from app.config import load_rules, get_task_type_config, get_client_config
 
 def normalize_task_input(task_input: TaskIntake) -> Task:
@@ -279,7 +278,7 @@ def demo_task_processing():
             print(f"   • {subtask.title}{effort}")
         
         processed_tasks.append(task)
-        print(f"\n✅ Task processed successfully!")
+        print("\n✅ Task processed successfully!")
     
     # Step 7: Show final prioritization
     print(f"\n{'='*60}")
diff --git a/tests/test_basic.py b/tests/test_basic.py
index 5ec34f1..290a094 100644
--- a/tests/test_basic.py
+++ b/tests/test_basic.py
@@ -2,9 +2,8 @@
 Basic tests to ensure CI pipeline works
 """
 
-import pytest
 from app.utils.retry import next_backoff, retry
-from app.utils.outbox import OutboxOperation, OutboxManager, make_idempotency_key
+from app.utils.outbox import OutboxOperation, make_idempotency_key
 
 
 def test_next_backoff():
diff --git a/tests/test_outbox_integration.py b/tests/test_outbox_integration.py
index bf79968..74294e0 100644
--- a/tests/test_outbox_integration.py
+++ b/tests/test_outbox_integration.py
@@ -1,6 +1,4 @@
 import os
-import time
-from datetime import datetime, timezone
 from app.db_pg import init, get_conn
 from app.utils.outbox import OutboxManager, make_idempotency_key
 
